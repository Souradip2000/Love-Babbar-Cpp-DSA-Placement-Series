// Book allocation problem -- Coding Ninjas

#include <bits/stdc++.h> 

// m --> size of the Array
// n --> no. of days

bool isPossible( vector<int> arr, int n, int m, int mid )
{
    //sort(arr.begin(), arr.end());
    int daysCount = 1;
    int timeSum = 0;
    
    for( int i=0; i<arr.size(); i++ )
    {
        if( timeSum + arr[i] <= mid )
        {
            timeSum += arr[i];
        }
        else
        {
            daysCount++;
            if( daysCount > n || arr[i] > mid )
            {
                return false;
            }
            timeSum = arr[i];
        }
    }
    
    return true;
}

long long ayushGivesNinjatest(int n, int m, vector<int> time) 
{	
	// Write your code here.
    
    int sum = 0;
    for ( int i=0; i<time.size(); i++ )
    {
        sum += time[i];
    }
    
    int ans = -1;
    int start = 0;
    int end = sum;
    
    int mid = start + ( end - start) /2 ;
    
    while( start <= end )
    {
        if( isPossible( time, n, m, mid ) )
        {
            ans = mid;
            end = mid - 1;
        }
        else
        {
            start = mid + 1;
        }
        
        mid = start + ( end - start ) /2 ;
    }
    
    return ans;
    
}

// Painter's Partition problem -- Coding Ninjas

int findLargestMinDistance(vector<int> &boards, int k)
{
    //    Write your code here.
    
    int totalPainters = k;
    //cout << "Total number of painters are : " << k << endl;
    
    int sum = 0;
    int maxLength = -1;
    
    for( int i=0; i<boards.size(); i++ )
    {
        sum += boards[i];
        maxLength = max( maxLength, boards[i] );
    }
    
    //cout << "Max length : " << maxLength << endl;
    //cout << "Sum : " << sum << endl;
    
//     int currentLength = 0;
//     int painter = 1;
    int ans = -1;
    
    int start = maxLength, end = sum;
    int mid = start + ( end - start )/2 ;
    
//     cout << "Start : " << start << endl;
//     cout << "End : " << end << endl;
//     cout << "Mid : " << mid << endl;
    
    int count = 0;
    
    while( start <= end )
    {
        count++;
//         cout<< "The loop is running : " << count << endl;
        int painter = 1;
        int currentLength = 0;
        for( int i=0; i<boards.size(); i++ )
        {
            currentLength += boards[i];
            
            if( currentLength > mid )
            {
                painter++;
                currentLength = boards[i];
//                 cout << "Painter number: " << painter << endl;
            }
        }
        
        if( painter == totalPainters )
        {
            ans = mid;
           // cout<<"Ans now is:"<<ans<<endl;
            end = mid - 1;
        }
        else if( painter > k)
        {
            start = mid + 1;
        }
        
        mid = start + ( end - start )/2 ;
       // cout << "Mid : " << mid << endl;
    }
    
    return ans;
    
}
