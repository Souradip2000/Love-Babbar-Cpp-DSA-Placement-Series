// Search in a Sorted and rotated array. -- Naive approach

#include <bits/stdc++.h> 
int findPosition(vector<int>& arr, int n, int k)
{
    // Write your code here.
    
    for ( int i=0; i<arr.size(); i++)
    {
        if( arr[i] == k)
        {
            return i;
        }
        
        //return -1;
    }
    return -1;
    
    // Return the position of K in ARR else return -1.
}




#include <bits/stdc++.h> 
int findPosition(vector<int>& arr, int n, int k)
{
    // Write your code here.
    
    
    // Loop to find pivot element
    
    int s = 0;
    int e = arr.size() - 1;
    //int size = arr.size() - 1;
    
    int mid = s + (e-s)/2;
    
    while( s < e )
    {
        if( arr[mid] > arr[0] )
        {
            s = mid + 1;
        }
        else 
        {
            e = mid;
        }
        
        mid = s + ( e-s )/ 2 ;
    }
    
    cout << "The pivot element is : " << s << endl;
    
    
    // applying b.s. to right part of graph
    
    if ( (arr[s] <= k) && (k <= arr[arr.size()]) )
    {
        int start = s;
        int end = arr.size();
        
        int m = start + ( end - start )/2;
        
        while( start <= end )
        {
            if( arr[m] == k)
            {
                return m;
            }
            else if ( arr[m] < k )
            {
                start = m + 1;
            }
            else 
            {
                end = m - 1;
            }
            
            m = start + ( end - start )/2;
        }
        
        return -1;
    }
    
    
    // loop to search in left part of graph
    
    if ( (arr[0] <= k) && (k <= arr[s]) )
    {
        int start = 0;
        int end = s;
        
        int m = start + ( end - start )/2;
        
        while( start <= end )
        {
            if( arr[m] == k)
            {
                return m;
            }
            else if ( arr[m] < k )
            {
                start = m + 1;
            }
            else 
            {
                end = m - 1;
            }
            
            m = start + ( end - start )/2;
        }
        
        return -1;
    }
    
    // Return the position of K in ARR else return -1.
}



