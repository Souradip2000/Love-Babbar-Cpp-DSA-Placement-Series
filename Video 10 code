#include <iostream>
#include<math.h>

using namespace std;

// Function to find unique element 
int uniqueElement(int arr[], int n)
{
  int unique = NULL;
  for(int i=0; i<n; i++)
    {
      int flag = 0;
      // unique = arr[i];
      for(int j=0; j<n; j++)
        {
          
          if( i!=j)
          {
            if( arr[i] == arr[j])
            {
              flag = 1;
              break;
            }
          }
        }
      if( flag==0 )
      {
        unique = arr[i];
        break;
      }
    }
  return unique;
}

// Code to find duplicate element in an array containing n elements and a minimum of n-1 different elements
int main() {
  int arr[5] = {1, 2, 4, 2, 1};
  int n = uniqueElement(arr,5);
  cout << "The unique element is : " << n;
  
  return 0;
}


#include <iostream>

using namespace std;

int findDuplicate(int arr[]) 
{
    // Write your code here
	for( int i=0; i<5; i++)
    {
        for(int j=0; j<5; j++)
        {
          if(i!=j)
          {
            if( (arr[i] ^ arr[j]) == 0)
            {
              return arr[i];
            }
                
          }
        }
    }
}



int main() {
  int arr[5] = {1,2,4,3,4};
  cout << findDuplicate(arr);
}










//Find the unique element in an array

int findUnique(int *arr, int n)
{
    //Write your code here
    int unique = NULL;
  for(int i=0; i<n; i++)
    {
      int flag = 0;
      // unique = arr[i];
      for(int j=0; j<n; j++)
        {
          
          if( i!=j)
          {
            if( arr[i] == arr[j])
            {
              flag = 1;
              break;
            }
          }
        }
      if( flag==0 )
      {
        unique = arr[i];
        break;
      }
    }
  return unique;
}









// Intersection of two arrays

#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
    int i=0, j=0;
    vector<int> ans;
    
    while( i<n && j<m )
    {
        if( arr1[i] == arr2[j] )
        {
            ans.push_back( arr1[i] );
            i++;
            j++;
        }
        
        else if( arr1[i] < arr2[j] )
        {
            i++;
        }
        
        else
        {
            j++;
        }
      
    }
    return ans;
    
    
    
    
    
    
    
    
    
    
    

    /*
    vector<int> ans;
    int j=0;
    for( int i=0; i<n; i++)
    {
        //int element = arr1[i];
        
        for( ; j<m; j++)
        {
            if( arr2[j] > arr1[i] )
            {
                break;
            }
            if( arr1[i] == arr2[j] )
            {
                ans.push_back( arr1[i] );
                //arr2[j] = -2;
                
                break;
            }
            
        }
    }
    return ans;
    
    */
  
    

    
    /*
    int i = 0, j = 0;
    vector<int> ans;
    while(i<n && j<m) {
    
    if(arr1[i]==arr2[j])
    {
        ans.push_back(arr1[i]);
        i++;
        j++;
    }
    else if (arr1[i] < arr2[j]) {
          i++;
    }
    else
    {
        j++;
    }
    
    }
    return ans;
    */
    
    // array is in increasing order
    // run two loops, one each for each array
    // compare the elements until one element is less than the other
    /*
    vector<int> arr;/*[ ( (n<m) ? n : m ) ],
    //int index = 0;
    for( int i=0; i<n; i++ )
    {
        //int element = 0;
        for(int j=0; j<m; j++)
        {
            int element = arr[i];
            if( element == arr2[j])
            {
                arr.push_back( element );
                arr2[j] = -1;
                break;
            }
        }
    }
    
    return arr;
    
    */
    
    // 
    
}










// Duplicates in an Array

int findDuplicate(vector<int> &arr) 
{
    // Write your code here
    int ans = 0;
	for( int i=0; i<arr.size(); i++)
    {
        ans = ans ^ arr[i];
    }
    for( int i=0; i<arr.size(); i++)
    {
        ans = ans ^ i;
    }
    return ans;
}


