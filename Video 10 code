#include <iostream>
#include<math.h>

using namespace std;

// Function to find unique element 
int uniqueElement(int arr[], int n)
{
  int unique = NULL;
  for(int i=0; i<n; i++)
    {
      int flag = 0;
      // unique = arr[i];
      for(int j=0; j<n; j++)
        {
          
          if( i!=j)
          {
            if( arr[i] == arr[j])
            {
              flag = 1;
              break;
            }
          }
        }
      if( flag==0 )
      {
        unique = arr[i];
        break;
      }
    }
  return unique;
}

// Code to find duplicate element in an array containing n elements and a minimum of n-1 different elements
int main() {
  int arr[5] = {1, 2, 4, 2, 1};
  int n = uniqueElement(arr,5);
  cout << "The unique element is : " << n;
  
  return 0;
}


#include <iostream>

using namespace std;

int findDuplicate(int arr[]) 
{
    // Write your code here
	for( int i=0; i<5; i++)
    {
        for(int j=0; j<5; j++)
        {
          if(i!=j)
          {
            if( (arr[i] ^ arr[j]) == 0)
            {
              return arr[i];
            }
                
          }
        }
    }
}



int main() {
  int arr[5] = {1,2,4,3,4};
  cout << findDuplicate(arr);
}










//Find the unique element in an array

int findUnique(int *arr, int n)
{
    //Write your code here
    int unique = NULL;
  for(int i=0; i<n; i++)
    {
      int flag = 0;
      // unique = arr[i];
      for(int j=0; j<n; j++)
        {
          
          if( i!=j)
          {
            if( arr[i] == arr[j])
            {
              flag = 1;
              break;
            }
          }
        }
      if( flag==0 )
      {
        unique = arr[i];
        break;
      }
    }
  return unique;
}









// Intersection of two arrays

#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
    int i=0, j=0;
    vector<int> ans;
    
    while( i<n && j<m )
    {
        if( arr1[i] == arr2[j] )
        {
            ans.push_back( arr1[i] );
            i++;
            j++;
        }
        
        else if( arr1[i] < arr2[j] )
        {
            i++;
        }
        
        else
        {
            j++;
        }
      
    }
    return ans;
    
    
    
    
    
    
    
    
    
    
    

    /*
    vector<int> ans;
    int j=0;
    for( int i=0; i<n; i++)
    {
        //int element = arr1[i];
        
        for( ; j<m; j++)
        {
            if( arr2[j] > arr1[i] )
            {
                break;
            }
            if( arr1[i] == arr2[j] )
            {
                ans.push_back( arr1[i] );
                //arr2[j] = -2;
                
                break;
            }
            
        }
    }
    return ans;
    
    */
  
    

    
    /*
    int i = 0, j = 0;
    vector<int> ans;
    while(i<n && j<m) {
    
    if(arr1[i]==arr2[j])
    {
        ans.push_back(arr1[i]);
        i++;
        j++;
    }
    else if (arr1[i] < arr2[j]) {
          i++;
    }
    else
    {
        j++;
    }
    
    }
    return ans;
    */
    
    // array is in increasing order
    // run two loops, one each for each array
    // compare the elements until one element is less than the other
    /*
    vector<int> arr;/*[ ( (n<m) ? n : m ) ],
    //int index = 0;
    for( int i=0; i<n; i++ )
    {
        //int element = 0;
        for(int j=0; j<m; j++)
        {
            int element = arr[i];
            if( element == arr2[j])
            {
                arr.push_back( element );
                arr2[j] = -1;
                break;
            }
        }
    }
    
    return arr;
    
    */
    
    // 
    
}










// Duplicates in an Array

int findDuplicate(vector<int> &arr) 
{
    // Write your code here
    int ans = 0;
	for( int i=0; i<arr.size(); i++)
    {
        ans = ans ^ arr[i];
    }
    for( int i=0; i<arr.size(); i++)
    {
        ans = ans ^ i;
    }
    return ans;
}













// Pair Sum in an Array

#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
vector<vector<int>> pairSum(vector<int> &arr, int s){

    vector< vector< int > > ans;
    
    for( int i=0; i<arr.size(); i++)
    {
        for( int j=i+1; j<arr.size(); j++)
        {
            if( ( arr[i] + arr[j] ) == s )
            {
                vector<int> temp;
                temp.push_back( min(arr[i], arr[j] ) );
                temp.push_back( max(arr[i], arr[j] ) );
                ans.push_back( temp );
            }
            
        }
    }
    sort( ans.begin(), ans.end() );
    return ans;
    
}







//Code to find Triplet Sum - Brute Force

#include <iostream>
#include <bits/stdc++.h> 

using namespace std;

int main() {
  int arr[6] = {1,2,3,4,5,6};
  int K = 12;
  for( int i=0; i<6; i++)
    {
        for( int j=i+1; j<6; j++)
        {
            for( int k=j+1; k<6; k++)
            {
                if( arr[i] + arr[j] + arr[k] == K )
                {
                    cout << arr[i] <<" "<<arr[j] <<" "<<arr[k]<<endl;
                }
            }
        }
    }

  return 0;
}





// Code to sort 0's , 1's and 2's  -- Brute Force
#include <iostream>

using namespace std;


void sort012(int *arr, int n)
{
   //   Write your code here
    
    // count the number of zeros , one's and two's
    // insert them accordingly
    
    int zero=0, one=0, two=0;
    for( int i=0; i<n; i++)
    {
        if( arr[i] == 0 )
        {
          zero++;
          cout <<"0's count: " << zero << endl;
        }
        else if( arr[i] ==1 )
          {
          one++;
          cout <<"1's count: "<< one << endl;
        }
        else if( arr[i] == 2 )
          {
          two++;
          cout <<"2's count: "<< two << endl;
        }
    }

  int index = 0;
    for(int i=0; i<zero; i++)
    {
        arr[index] = 0;
      index++;
    }
    for(int i=0; i<one; i++)
    {
        arr[index] = 1;
      index++;
    }
    for(int i= 0; i<two; i++)
    {
        arr[index] = 2;
      index++;
    }
}

int main() {
  int arr[6] = {0,2,1,2,1,1};

  sort012(arr, 6);

  for(int i=0; i<6; i++)
    {
      cout<< arr[i];
    }
  
  return 0;
}


// Two pointer approach to sorting an array of 0's and 1's

// Code to sort 0's , 1's and 2's
#include <iostream>

using namespace std;


void sort01(int *arr, int n)
{
  int i=0, j=n-1 ;
  while( i<j )
    {
      if( arr[i] == 0)
      {
        i++;
        //cout << "i = " << i << endl;
      }
      if( arr[j] == 1 )
      {
        j--;
        //cout << "j = " << j << endl;
      }
      else if( arr[i] == 1 && arr[j] == 0)
      {
        swap(arr[i], arr[j]);
      }
    }
  for(int i=0; i<6; i++)
    {
      cout<< arr[i];
    }
  cout<<endl;
}

int main() {
  int arr[6] = {0,1,1,0,1,0};

  sort01(arr, 6);

  // for(int i=0; i<6; i++)
  //   {
  //     cout<< arr[i];
  //   }
  
  return 0;
}
