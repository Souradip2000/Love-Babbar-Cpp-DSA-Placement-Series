arr will always print the address until we write arr[index].

arr = arr + 1;    --> this cannot be done as we cannot update values in the symbol table
int *ptr = &i;
ptr = ptr + 1;    --> this can be done as here we are just increasing the value of the pointer
                      just like we change the value of a variable
                      and not changing the address of the memory block that is named ptr in the symbol table

implementation of char array and integer array is different.
if we say : cout<< charArr;   --> the entire char array is printed   ( charArr is a pointer to a character array )
if we say : cout<< intArr;    --> only the first element of the int array is printed    ( intArr is a pointer to an integer array )

whenever we are using a char array to store a string, there is a null character as the last element of the array.
if we print a pointer to any element in the char array, it keeps printing until it finds the null character.

To return multiple values from a function, 



-> : use the arrow operator to access the member of a pointer pointing to an object or a struct
     it is similar to dereferencing the pointer and accessing the members in the object or struct
