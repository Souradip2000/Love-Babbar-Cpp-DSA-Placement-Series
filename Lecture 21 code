189. Rotate array

class Solution {
public:
    void rotate(vector<int>& arr, int k) {
        vector<int> temp(arr.size());
        for(int i=0; i<arr.size(); i++ )
        {
            temp[(i+k)%arr.size()] = arr[i];
        } 
        for(int i=0; i<temp.size(); i++)
            arr[i] = temp[i]; 
    }
};

1752 - Check if array is rotated and sorted

class Solution {
public:
    bool check(vector<int>& nums) {
        int count = 0;
        int n = nums.size();

        for(int i=1; i<n; i++)
        {
            if(nums[i] < nums[i-1])
            {
                count++;
                cout<<"count : "<<count<<endl;
            }
        }
        if(nums[n-1] > nums[0])
            count++;
        cout<<"Last and first element comparison : "<<count;
        
        return (count==1 || count==0);
    }
};

// Sum of two arrays

#include <bits/stdc++.h> 
vector<int> findArraySum(vector<int>&a, int n, vector<int>&b, int m) {
	// Extract number 1 
	int num1 = 0;
	for(int i=0; i<n; i++)
	{
		num1 += a[i] * pow(10, (n-i-1));
	}
	//cout<<endl<<"NUm 1: "<<num1;


	// Extract number 2
	int num2 = 0;
	for(int i=0; i<m; i++)
	{
		num2 += b[i] * pow(10, (m-i-1));
	}
	//cout<<endl<<"NUm 2: "<<num2;


	// Finding the sum
	int sum = num1 + num2;	
	//cout<<endl<<"Sum : "<<sum;


	//Calculating the places in the answer
	int count = 0;
	int temp1 = sum;
	while(temp1 != 0)
	{
		temp1 /= 10;
		count++;
	}


	// Storing sum in array
	vector<int> ans;
	for(int i=0; i<count; i++)
	{
		//ans.push_back(sum/(pow(10,count-i-1)));
		int digit = sum/(pow(10, count-i-1));
		ans.push_back(digit);
		sum -= digit*(pow(10,count-i-1));
	}

	return ans;


}
