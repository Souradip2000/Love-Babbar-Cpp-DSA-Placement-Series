// Program to calculate the length of a string

#include <iostream>

using namespace std;

int main()
{
    char arr[20];
    cin>>arr;
    cout<<"\nThe name is: "<<arr<<endl;
    
    int count = 0;
    
    for( char i : arr)
    {
        if(i != '\0')
            count++;
        else
            break;
    }
    
    cout<<endl<<"The length of the string is : "<<count;
    return 0;
}


// Reverse a string

class Solution {
public:
    void reverseString(vector<char>& s) {
        int size = s.size();
        int i=0;
        int j=size-1;

        while(i<=j)
        {
            swap(s[i++],s[j--]);
        }
    }
};


// Maximum Occuring Character


class Solution
{
    public:
    //Function to find the maximum occurring character in a string.
    char getMaxOccuringChar(string str)
    {
        // Conver entire string to Uppercase
        for(int i=0; i<str.length(); i++)
        {
            str[i] = toupper(str[i]);
        }
        // Create an array of size 26
        int arr[26];
        // Initialise all the elements with zero
        for(int i=0; i<26; i++)
            arr[i]=0;
        // 0th element represents count of 'A' or 'a', 1st element represents count of 'B'/'b' and so on
        int i=0;
        while(i<str.length())
        {
            int index = str[i] - 'A';
            arr[index]+=1;
            i++;
        }

/*
        // printing the frequency array
        cout<<endl;
        for(int k: arr)
            cout<<k<<" ";
        cout<<endl;
*/        
        
        // search array for largest element
        int max = -1;
        int pos = -1;
        for(int j=0; j<26; j++)
        {
            if(arr[j]>max)
            {
                max=arr[j];
                pos=j;
            }
            //cout<<endl<<"Maximum frequency character is: "<<'A'+max;
        }
        return tolower('A'+pos);
        
    }

};

// Approach 1
// Remove all spaces
// Time complexity : O(n)
// Space complexity : O(n) --> because we have declared an empty string which we append depending on the length of the string

#include <bits/stdc++.h> 
string replaceSpaces(string &str){
	string temp="";
	for(int i=0; i<str.length(); i++)
	{
		if(str[i]==' ')
		{
			temp.push_back('@');
			temp.push_back('4');
			temp.push_back('0');
		}
		else
		{
			temp.push_back(str[i]);
		}
	}

	return temp;
}

// The above problem in space complexity : O(1)





// 1910. Remove all occurrences of a sub-string

class Solution {
public:
    string removeOccurrences(string s, string part) {
        // start by removing leftmost occurrence of the sub string
        // after removing the leftmost occurrence, check again from the begining
        // if occurrence is removed, continue loop
        // if entire string is traversed and occurrence not found, breaak from the loop

        // use find function to get the first position of the first occurrence of the sub string
        // if position found, remove next characters equal to the length of substring
        // check again 
        // if not found, break 
        // return string

        while( s.length()!=0 && s.find(part)<s.length() )     
        {
            s.erase(s.find(part), part.length());
        }   
        return s;
    }
};




// potd



class Solution {
private:
    void dfs(vector<vector<int>> &adj, vector<bool> &visited, int src)
    {
        visited[src] = true;
        for(int i : adj[src])
            if(!visited[i])
                dfs(adj, visited, i);
    }
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        
        if(connections.size() < n - 1)
            return -1;
        vector<vector<int>> adj(n);
        for(auto v : connections)
        {
            adj[v[0]].push_back(v[1]);
            adj[v[1]].push_back(v[0]);
        }
        vector<bool> visited(n, false);
        int components = 0;
        for(int i=0; i<n; i++)
            if(!visited[i])
            {
                dfs(adj, visited, i);
                components++;
            }
        return components - 1;
    }
};
