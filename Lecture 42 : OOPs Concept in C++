OOP - relates code to real life through objects
this increases readability, managability and extensibility of the code we write

readability         -         code that clearly communicates its intent to the reader
managability        -         how easily and efficiently a software can be monitored and maintained to keep the system performing, secure and running smoothly
extensibility       -         the ability of the software system to allow and accept the significant extension of its capabilities without major rewriting of code or changes in its basic architecture

_______________________________________________________________________________________________________________________________________________________________________________________________________

class - user defined data type
object - instance of class

object:  1. properties (data members)
         2. behaviour  (functions)

If the class has no data members and "an object has been created" of this class, then the size of the object will be 1 byte.
Otherwise if no object has been created, then the class definition will take 0 bytes of memory.

#include "Hero.cpp"
class has been declared in a different file, which we will be using in the current file

Access data members using '.' dot operator 

By default, access modifiers in a class are private
Use getters and setters to access private data members in a class.
Getter and setter can be used to implement password as to who all can get or set the values.

Access modifiers:
-         public : can be accessed anywhere, outside or inside the class
-         private : can be accessed only inside the class
-         protected : 

If we use : sizeof(Hero); --> 8 because of 1.padding and 2.greedly alignment


Static and Dynamic allocation of memory for object of class:
#include<iostream>
using namespace std;

class Hero{
    private:
        int health;
    public:
        char level;
        int getHealth(){
            return health;
        }
        void setHealth(int x){
            health=x;
        }
};

int main(){
    Hero ramesh;
    // we use the dot operator to access the data members and member functions of the object
    ramesh.setHealth(70);
    ramesh.level='A';
    cout<<ramesh.getHealth()<<endl;
    cout<<ramesh.level<<endl;
    
    // for a dynamically allocated object, we use the -> operator
    // it first dereferences the pointer, and then uses the function of the dot operator
    Hero *h1 = new Hero;
    h1->setHealth(50);
    h1->level='B';
    cout<<h1->getHealth()<<endl;
    cout<<h1->level<<endl;
    cout<<(*h1).level;
    return 0;
}


If the object has been dynamically allocated, then we can use the arrow -> operator on the pointer to the object 
to access one of the data members or member functions.
Other way is to dereference using * and then use the dot (.) operator.




Constructors:
 - It is invoked at the time of object creation.
whenever we declare
Hero ramesh;
a function call takes place ramesh.Hero();

This is called the default constructor:

Default constructors : 
         -  invoked at the time of object creation
         -  has no return type
         - dosen't require any parameters
This will be invoked irrespective of static or dynamic allocation of memory.




this keyword












