// Creating 2D array
// Initialising the 2D array
// Taking input column-wise and row-wise

// Row-wise sum of a 2-D array:

#include <iostream>
#include <vector>

using namespace std;

int main()
{
    int arr[3][3]={1,2,3,4,5,6,7,8,9};
    vector<int> ans;
    
    for(int i=0;i<3;i++)
    {
        int sum=0;
        for(int j=0;j<3;j++)
        {
            sum+=arr[i][j];
        }
        ans.push_back(sum);
    }
    
    for(int i: ans)
        cout<<i<<" ";
    return 0;
}





// Print like a wave - coding ninjas

// link --  https://www.codingninjas.com/codestudio/problems/print-like-a-wave_893268?utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_6&leftPanelTab=1

// time complexity - O(nm)      --> n- number of rows       --> m- number of cols

#include <bits/stdc++.h> 
vector<int> wavePrint(vector<vector<int>> arr, int nRows, int mCols)
{
    //Write your code here
    vector<int> ans;

    for(int i=0; i<mCols; i++)
    {
        // for even number of cols, go top down
        if(i%2==0)
        {
            for(int j=0; j<nRows; j++)
            {
                ans.push_back(arr[j][i]);
            }
        }
        else    // for odd number of cols, go bottom up
        {
            for(int j=nRows-1; j>=0; j--)
            {
                ans.push_back(arr[j][i]);
            }
        }
    }

    return ans;

}





// 54. Spiral Matrix -- Leetcode
// Link - https://leetcode.com/problems/spiral-matrix/description/

// time complexity - O(n*m)     --      because we visit every element only once

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {

       // we need to print first row, last col, last row, first col in a loop
       // update the first row to the next one after one has been printed

       vector<int> ans;

       int row=matrix.size();
       int col=matrix[0].size();

       // index initialisation
       int startingRow =0;
       int startingCol=0;
       int endingRow=row-1;
       int endingCol=col-1;

       int count=0;
       int totalCount= row*col;

       while(count<totalCount)
       {
           // print starting row
           for(int index=startingCol; count<totalCount && index<=endingCol; index++)
           {
               ans.push_back(matrix[startingRow][index]);
               count++;
           }
           startingRow++;

           // print ending column
           for(int index=startingRow; count<totalCount && index<=endingRow; index++)
           {
               ans.push_back(matrix[index][endingCol]);
               count++;
           }
           endingCol--;           

           // print ending row
           for(int index=endingCol; count<totalCount && index>=startingCol; index--)
           {
               ans.push_back(matrix[endingRow][index]);
               count++;
           }
           endingRow--;

           // print starting column
           for(int index=endingRow; count<totalCount && index>=startingRow; index--)
           {
               ans.push_back(matrix[index][startingCol]);
               count++;
           }
           startingCol++;
       }

    return ans;
    }
};




// 48. Rotate Image
// Link - https://leetcode.com/problems/rotate-image/description/

// done by creating another matrix, in place replacement not done

// time complexity - O(n*m)     --> because we are visiting the element only once

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        vector<vector<int>> ans;

        int size=matrix.size();

        for(int i=0; i<size; i++)
        {
            vector<int> row;
            for(int j=size-1; j>=0; j--)
            {
                row.push_back(matrix[j][i]);
            }
            ans.push_back(row);
        }

        for(int i=0; i<size; i++)
        {
            matrix[i] = ans[i];
        }
    }
};
