// Count Primes

// gives TLE

class Solution {
private:
    bool isPrime(int n)
    {
        for(int i=2; i<=n/2; i++)
        {
            if(n%i==0)
                return false;
        }
        return true;
    }
public:
    int countPrimes(int n) {
        int count=0;

        for(int i=2; i<n; i++)
        {
            if(isPrime(i))
                count++;
        }

        return count;
    }
};

// time complexity of the above code : O(n^2))

// Method 2: Sieve of Erastosthenes

class Solution {
public:
    int countPrimes(int n) {
      vector<bool> primes(n+1, true);

      primes[0] = primes[1] = false;

      int cnt=0;
      for(int i=2; i<n; i++){
          if(primes[i]){
              cnt++;

              for(int j=i+i; j<n; j+=i){
                  primes[j]=false;
              }
          }
      } 

      return cnt; 
    }
};
