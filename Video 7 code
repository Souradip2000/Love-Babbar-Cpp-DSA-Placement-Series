// 1009. Leetcode - The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.
  // For example, The integer 5 is "101" in binary and its complement is "010" which is the integer 2.
  // Given an integer n, return its complement.

  // Code in 1st attempt
  
  class Solution {
public:
    int bitwiseComplement(int n) {
        // store the binary number
        
       // {
            int bin=0, i=0;
            while(n!=0)
            {
                // pow()
                int remainder = n%2;
                bin = (remainder * pow(10,i)) + bin;
                i++;
                n/=10;
            }
       // }
        
        // complement the binary number
        
        //{
            int complement = 0, j=0;
            while( bin!=0)
            {
                int bit = bin % 10;
                if(bit==0)
                {
                   complement = (1 * pow(10,i)) + complement;
                    j++;
                    bin/=10;
                }
                else if (bit==1)
                {
                    j++;
                    bin/=10;
                }
            }
       // }
        
        // convert to decimal number
        
        int ans=0, k=0;
        while(complement != 0)
        {
            int digit = complement % 10;
            ans = ans + (digit * pow(2,k));
            k++;
            complement/=10;
        }
        
        return ans;
        
    }
};

  // Code to print the binary form in which an integer is stored

  int n, bin = 0, i=0;
  cout<<"Enter the integer: ";
  cin>>n;

  while(n!=0)
    {
      int bit = n&1;
      bin = ((bit * pow(10,i)) + bin);
      i++;
      n>>=1;
    }

  cout<<bin;
  
    // Code to complement the binary number

  int complement = 0, j=0;

  while(bin!=0)
    {
      int d = bin%10;
      if(d==0)
      {
        complement = ((1 * pow(10,j)) + complement);
        j++;
        bin/=10;
      }
      else if (d==1)
      {
        j++;
        bin/=10;
      }
    }

  cout<<"The complement is: "<<complement;
  
  // 1009. - My try final code - 83 / 128 test cases passed
  
  class Solution {
public:
    int bitwiseComplement(int n) {
        // store the binary number
        
        long int  bin = 0, i=0;

        while(n!=0)
        {
            int bit = n&1;
            bin = ((bit * pow(10,i)) + bin);
            i++;
            n>>=1;
        }


        
        // complement the binary number
        
        long int complement = 0, j=0;
        if(bin==0)
        {
            complement = 1;
        }

        while(bin!=0)
        {
            int d = bin%10;
            if(d==0)
            {
                complement = ((1 * pow(10,j)) + complement);
                j++;
                bin/=10;
            }
            else if (d==1)
            {
                j++;
                bin/=10;
            }
        }
        
        // convert to decimal number
        
        int ans=0, k=0;
        while(complement != 0)
        {
            int digit = complement % 10;
            ans = ans + (digit * pow(2,k));
            k++;
            complement/=10;
        }
        
        return ans;
        
    }
};

// 1009. Actual solution:

class Solution {
public:
    int bitwiseComplement(int n) {
        int m=n;
        int mask = 0;
        
        if (n==0)
        {
            return 1;
        }
        
        while(m!=0)
        {
            mask = ( mask << 1 ) | 1;
            m = m>>1;
        }
        
        int ans = (~n) & mask;
        
        return ans;
    }
};

// 213 - Leetcode 

class Solution {
public:
    bool isPowerOfTwo(int n) {
        for( int i=0; ; i++)
        {
           if(pow(2,i) == n)
           {
               return true;
               break;
           }
            else if (pow(2,i) > n)
            {
                break;
            }
        }
        return false;
    }
};
  
