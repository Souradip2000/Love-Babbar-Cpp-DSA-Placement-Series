// function to check if an array is sorted using recursion
#include <iostream>
using namespace std;

bool isSorted(int arr[], int size){          // here we can write isSorted (int *arr, ...)   as a pointer is passed only
    bool ans;
    // base case
    if(size==0 || size==1)
        return true;
    else if(arr[0]>arr[1])  
        return false;
    else 
        ans=isSorted(arr+1, size-1);
    
    return ans;
}

int main(){
    int arr[6]={1,2,5,4,5,6};
    if(isSorted(arr, 6))    cout<<"yes";
    else    cout<<"no";
    return 0;
}





// Homework:
// function to find the sum of an array using recursion
// array[5] = {3,2,5,1,6}
// find the sum of the elements
#include <iostream>
using namespace std;

int arraySum(int arr[], int size, int sum){
    // base case
    if(size==1){
        return sum+=arr[size-1];
    }
    return sum+arr[size-1]+arraySum(arr, size-1, sum);
}

int main(){
    int arr[5]={3,2,5,1,6};
    int sum=0;
    cout<<arraySum(arr, 5, sum);
    return 0;
}



// method 2:
// function to find the sum of an array using recursion
// array[5] = {3,2,5,1,6}
// find the sum of the elements
#include <iostream>
using namespace std;

int arraySum(int *arr, int size){
    // base case
    if(size==0) return 0;
    else if(size==1)    return arr[0];
    
    int sum=arr[0];
    int remainingPart = arraySum(arr+1, size-1);
    return sum+remainingPart;
}

int main(){
    int arr[5]={3,2,5,1,6};
    cout<<arraySum(arr, 5);
    return 0;
}








// code to implement linear search using recursion
#include <iostream>
using namespace std;

bool found(int arr[], int size, int target){
    // base case
    if(size==0) return false;
    
    if(arr[0]==target)  return true;
    
    return found(arr+1, size-1, target);
}

int main(){
    int arr[5]={3,5,1,2,6};
    int target=9;
    if(found(arr, 5, target))   cout<<"found";
    else    cout<<"not found";
    return 0;
}
